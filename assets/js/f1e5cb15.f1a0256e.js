"use strict";(self.webpackChunkh3_website=self.webpackChunkh3_website||[]).push([[2791],{3905:(e,t,n)=>{n.d(t,{Zo:()=>c,kt:()=>k});var i=n(7294);function l(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);t&&(i=i.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,i)}return n}function a(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){l(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function o(e,t){if(null==e)return{};var n,i,l=function(e,t){if(null==e)return{};var n,i,l={},r=Object.keys(e);for(i=0;i<r.length;i++)n=r[i],t.indexOf(n)>=0||(l[n]=e[n]);return l}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(i=0;i<r.length;i++)n=r[i],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(l[n]=e[n])}return l}var d=i.createContext({}),s=function(e){var t=i.useContext(d),n=t;return e&&(n="function"==typeof e?e(t):a(a({},t),e)),n},c=function(e){var t=s(e.components);return i.createElement(d.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return i.createElement(i.Fragment,{},t)}},u=i.forwardRef((function(e,t){var n=e.components,l=e.mdxType,r=e.originalType,d=e.parentName,c=o(e,["components","mdxType","originalType","parentName"]),u=s(n),k=l,x=u["".concat(d,".").concat(k)]||u[k]||p[k]||r;return n?i.createElement(x,a(a({ref:t},c),{},{components:n})):i.createElement(x,a({ref:t},c))}));function k(e,t){var n=arguments,l=t&&t.mdxType;if("string"==typeof e||l){var r=n.length,a=new Array(r);a[0]=u;var o={};for(var d in t)hasOwnProperty.call(t,d)&&(o[d]=t[d]);o.originalType=e,o.mdxType="string"==typeof e?e:l,a[1]=o;for(var s=2;s<r;s++)a[s]=n[s];return i.createElement.apply(null,a)}return i.createElement.apply(null,n)}u.displayName="MDXCreateElement"},4479:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>d,contentTitle:()=>a,default:()=>p,frontMatter:()=>r,metadata:()=>o,toc:()=>s});var i=n(7462),l=(n(7294),n(3905));const r={id:"h3Indexing",title:"H3 Index",sidebar_label:"H3 Index",slug:"/core-library/h3Indexing"},a=void 0,o={unversionedId:"library/index/h3Indexing",id:"library/index/h3Indexing",title:"H3 Index",description:"Introduction",source:"@site/docs/library/index/h3indexing.md",sourceDirName:"library/index",slug:"/core-library/h3Indexing",permalink:"/docs/core-library/h3Indexing",draft:!1,editUrl:"https://github.com/uber/h3/edit/master/website/docs/library/index/h3indexing.md",tags:[],version:"current",frontMatter:{id:"h3Indexing",title:"H3 Index",sidebar_label:"H3 Index",slug:"/core-library/h3Indexing"},sidebar:"someSidebar",previous:{title:"Function name changes",permalink:"/docs/library/migration-3.x/functions"},next:{title:"Cell mode",permalink:"/docs/library/index/cell"}},d={},s=[{value:"Introduction",id:"introduction",level:2},{value:"H3Index Representation",id:"h3index-representation",level:2},{value:"Invalid Index",id:"invalid-index",level:3},{value:"Bit layout of H3Index",id:"bit-layout-of-h3index",level:2},{value:"Links",id:"links",level:2}],c={toc:s};function p(e){let{components:t,...n}=e;return(0,l.kt)("wrapper",(0,i.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,l.kt)("h2",{id:"introduction"},"Introduction"),(0,l.kt)("p",null,"The H3 system assigns a unique hierarchical index to each cell. Each directed edge and vertex is assigned an index based on its origin or owner cell, respectively."),(0,l.kt)("h2",{id:"h3index-representation"},"H3Index Representation"),(0,l.kt)("p",null,"An ",(0,l.kt)("inlineCode",{parentName:"p"},"H3Index")," is the 64-bit integer representation of an H3 index, which may be one of multiple modes to indicate the concept being indexed."),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"Mode 0 is reserved and indicates an ",(0,l.kt)("a",{parentName:"li",href:"#invalid-index"},"invalid H3 index"),"."),(0,l.kt)("li",{parentName:"ul"},"Mode 1 is an ",(0,l.kt)("em",{parentName:"li"},(0,l.kt)("a",{parentName:"em",href:"../library/index/cell"},"H3 Cell"))," (Hexagon/Pentagon) index."),(0,l.kt)("li",{parentName:"ul"},"Mode 2 is an ",(0,l.kt)("em",{parentName:"li"},(0,l.kt)("a",{parentName:"em",href:"../library/index/directededge"},"H3 Directed Edge"))," (Cell A -> Cell B) index."),(0,l.kt)("li",{parentName:"ul"},"Mode 3 is planned to be a bidirectional edge (Cell A <-> Cell B)."),(0,l.kt)("li",{parentName:"ul"},"Mode 4 is an ",(0,l.kt)("em",{parentName:"li"},(0,l.kt)("a",{parentName:"em",href:"../library/index/vertex"},"H3 Vertex"))," (i.e. a single vertex of an H3 Cell).")),(0,l.kt)("p",null,"The canonical string representation of an ",(0,l.kt)("inlineCode",{parentName:"p"},"H3Index")," is the hexadecimal representation of the integer, using lowercase letters. The string representation is variable length (no zero padding) and is not prefixed or suffixed."),(0,l.kt)("h3",{id:"invalid-index"},"Invalid Index"),(0,l.kt)("p",null,"Mode 0 contains a special index, ",(0,l.kt)("inlineCode",{parentName:"p"},"H3_NULL"),", which is unique: it is bit-equivalent to ",(0,l.kt)("inlineCode",{parentName:"p"},"0"),".\nThis index indicates, ",(0,l.kt)("em",{parentName:"p"},"specifically"),", an invalid, missing, or uninitialized H3 index;\nit is analogous to ",(0,l.kt)("inlineCode",{parentName:"p"},"NaN")," in floating point.\nIt should be used instead of an arbitrary Mode 0 index, due to its uniqueness and easy identifiability.\nA mode 0 index could also indicate an ",(0,l.kt)("a",{parentName:"p",href:"../library/errors"},"error code")," has been provided instead of a valid H3 index."),(0,l.kt)("h2",{id:"bit-layout-of-h3index"},"Bit layout of H3Index"),(0,l.kt)("p",null,"The layout of an ",(0,l.kt)("inlineCode",{parentName:"p"},"H3Index"),' is shown below in table form. The interpretation of the "Mode-Dependent" field differs depending on the mode of the index.'),(0,l.kt)("table",null,(0,l.kt)("tr",null,(0,l.kt)("th",null),(0,l.kt)("th",null,"0x0F"),(0,l.kt)("th",null,"0x0E"),(0,l.kt)("th",null,"0x0D"),(0,l.kt)("th",null,"0x0C"),(0,l.kt)("th",null,"0x0B"),(0,l.kt)("th",null,"0x0A"),(0,l.kt)("th",null,"0x09"),(0,l.kt)("th",null,"0x08"),(0,l.kt)("th",null,"0x07"),(0,l.kt)("th",null,"0x06"),(0,l.kt)("th",null,"0x05"),(0,l.kt)("th",null,"0x04"),(0,l.kt)("th",null,"0x03"),(0,l.kt)("th",null,"0x02"),(0,l.kt)("th",null,"0x01"),(0,l.kt)("th",null,"0x00")),(0,l.kt)("tr",null,(0,l.kt)("th",null,"0x30"),(0,l.kt)("td",null,"Reserved"),(0,l.kt)("td",{colspan:"4"},"Mode"),(0,l.kt)("td",{colspan:"3"},"Mode-Dependent"),(0,l.kt)("td",{colspan:"4"},"Resolution"),(0,l.kt)("td",{colspan:"4"},"Base cell")),(0,l.kt)("tr",null,(0,l.kt)("th",null,"0x20"),(0,l.kt)("td",{colspan:"3"},"Base cell"),(0,l.kt)("td",{colspan:"3"},"Digit 1"),(0,l.kt)("td",{colspan:"3"},"Digit 2"),(0,l.kt)("td",{colspan:"3"},"Digit 3"),(0,l.kt)("td",{colspan:"3"},"Digit 4"),(0,l.kt)("td",null,"Digit 5")),(0,l.kt)("tr",null,(0,l.kt)("th",null,"0x10"),(0,l.kt)("td",{colspan:"2"},"Digit 5"),(0,l.kt)("td",{colspan:"3"},"Digit 6"),(0,l.kt)("td",{colspan:"3"},"Digit 7"),(0,l.kt)("td",{colspan:"3"},"Digit 8"),(0,l.kt)("td",{colspan:"3"},"Digit 9"),(0,l.kt)("td",{colspan:"2"},"Digit 10")),(0,l.kt)("tr",null,(0,l.kt)("th",null,"0x00"),(0,l.kt)("td",null,"Digit 10"),(0,l.kt)("td",{colspan:"3"},"Digit 11"),(0,l.kt)("td",{colspan:"3"},"Digit 12"),(0,l.kt)("td",{colspan:"3"},"Digit 13"),(0,l.kt)("td",{colspan:"3"},"Digit 14"),(0,l.kt)("td",{colspan:"3"},"Digit 15"))),(0,l.kt)("h2",{id:"links"},"Links"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"Observable notebook example: ",(0,l.kt)("a",{parentName:"li",href:"https://observablehq.com/@nrabinowitz/h3-index-bit-layout?collection=@nrabinowitz/h3"},"H3 Index Bit Layout"))))}p.isMDXComponent=!0}}]);